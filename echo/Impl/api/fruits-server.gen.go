// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.14.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/gitsridhar/myopenapi3/echo/Impl/api/models"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all fruits
	// (GET /fruits)
	FindFruits(ctx echo.Context, params FindFruitsParams) error
	// Creates a new fruit
	// (POST /fruits)
	AddFruit(ctx echo.Context) error
	// Delete a fruit by ID
	// (DELETE /fruits/{id})
	DeleteFruit(ctx echo.Context, id int64) error
	// Returns a fruit by ID
	// (GET /fruits/{id})
	FindFruitByID(ctx echo.Context, id int64) error
	// Update a fruit by ID
	// (PUT /fruits/{id})
	UpdateFruitByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindFruits converts echo context to params.
func (w *ServerInterfaceWrapper) FindFruits(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindFruitsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindFruits(ctx, params)
	return err
}

// AddFruit converts echo context to params.
func (w *ServerInterfaceWrapper) AddFruit(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddFruit(ctx)
	return err
}

// DeleteFruit converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFruit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFruit(ctx, id)
	return err
}

// FindFruitByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindFruitByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindFruitByID(ctx, id)
	return err
}

// UpdateFruitByID converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFruitByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateFruitByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/fruits", wrapper.FindFruits)
	router.POST(baseURL+"/fruits", wrapper.AddFruit)
	router.DELETE(baseURL+"/fruits/:id", wrapper.DeleteFruit)
	router.GET(baseURL+"/fruits/:id", wrapper.FindFruitByID)
	router.PUT(baseURL+"/fruits/:id", wrapper.UpdateFruitByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXTW/cNhD9K8S0R1XaOEEPOtWJbWCB1inqphd3D7Q4WrEVPzykvBEM/feCpLRrr2Qn",
	"bosibU8rkTPDNzNvHrX3UBlljUbtHZT34KoGFY+P50SGwoMlY5G8xLhcGYHhV6CrSFovjYYyGbO4l0Ft",
	"SHEPJUjtX59ABr63mF5xiwRDBgqd49snA03be1fnSeotDEMGhLedJBRQXsN44GS+GTK4oE76EJe37fsa",
	"yut7+JqwhhK+Kg65FmOixSXukseQHWcqxRzeBy1vO2RSMFMz3yCro/PjnL99s5DzEXIpYDMEvHsAs0pr",
	"rhYKdMkVHh9+VKQMPN/OPX/u7ac8j0BGBJshLFdGu04FYNfArW1lxUPYQpo8xnLeEOZ3r4rfnNGwyUDq",
	"2iS+aM+rmB4qLttwGklRtaYT323DSl4ZBdmYLlyRFA0n9gvq33mA2FHwaby3riyKvW/0GrKjHE/Z6Y9r",
	"5hvumUBltPPEPbqUL4sgWahxBO8gg1ZWqB0e6g2nllcNspN8NTt8t9vlPG7nhrbF6OuK79fvzi+vzr85",
	"yVd541UbW4Ck3Pv6CulOVvhUBkU0K0InpG+D2Q89i3xgVwEsZHCH5FJyr/JVvgqxjUXNrYQSXselDCz3",
	"TSRNkboRHrfo5yT4CX1H2jHetqkooTZGRVLE8vyqIR6QSrQWUMKF1OIihQ0nEVfokVycrcfRPd865g2r",
	"ZeuR2E0PgQhQwm2H1B+aHOwgG9UmzppHFUHPqZwWOBHvw7vzfaxTGLg4tI8RKP5Rqk4x3akbpEB3Qte1",
	"PsKimPwTmFqp4kgcQH1Sx4ZNmBdnTWBB8DhZrSbOo04q9GBW4mjsRfZR2s9J1KRPR6UYZuRPJJ8ApeGo",
	"edf6F2F6Dkq6ExaO7jR+tFh5FAxHmwxcpxSnfpF1AZ01boGh7wjjyHKmcTcOrtQHgubsrEv4gxFhCGp2",
	"KGa0PRWJtZBEDZ1/a0T/t9XicHPMy5Em2BvGhQg/e/DwUGA9dTj8RQZ9BnH+TURZaH60GGWtuJdiSJRp",
	"0S/cjmdxnXHmpN624z3Hbnq2PmOWzJ0UC0RJThNXnhW49VmQlHpq7whjFJQgwgc9kWLW7KfEZfmDYS4u",
	"b+YJJygJh/iSOrnvxIMWBHzP30qTNXcomNGHRq7Pnr6W3vZx9yWNq9FXzT/Wt//1SM96OzHBdgtM+GAF",
	"f0ibzyFC8vmzVOii93+PC2NeXxATjnubiBBsLBnRVS/4d+GQ7qbuPv5Gb03F28Y4X4Qv5GEz/BEAAP//",
	"eVla0OMOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
